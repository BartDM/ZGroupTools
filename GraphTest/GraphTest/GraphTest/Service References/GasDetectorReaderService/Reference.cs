//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GraphTest.GasDetectorReaderService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="GasDetectorReaderService.IGasDetectorReaderWcfService")]
    public interface IGasDetectorReaderWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IGasDetectorReaderWcfService/GetLastMeasure" +
            "ment", ReplyAction="http://Microsoft.ServiceModel.Samples/IGasDetectorReaderWcfService/GetLastMeasure" +
            "mentResponse")]
        ZGroup.MonitoringSuite.BDO.Common.Measurement GetLastMeasurement(long gasdetectorId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://Microsoft.ServiceModel.Samples/IGasDetectorReaderWcfService/GetLastMeasure" +
            "ment", ReplyAction="http://Microsoft.ServiceModel.Samples/IGasDetectorReaderWcfService/GetLastMeasure" +
            "mentResponse")]
        System.IAsyncResult BeginGetLastMeasurement(long gasdetectorId, System.AsyncCallback callback, object asyncState);
        
        ZGroup.MonitoringSuite.BDO.Common.Measurement EndGetLastMeasurement(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGasDetectorReaderWcfServiceChannel : GraphTest.GasDetectorReaderService.IGasDetectorReaderWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastMeasurementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastMeasurementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ZGroup.MonitoringSuite.BDO.Common.Measurement Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ZGroup.MonitoringSuite.BDO.Common.Measurement)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GasDetectorReaderWcfServiceClient : System.ServiceModel.ClientBase<GraphTest.GasDetectorReaderService.IGasDetectorReaderWcfService>, GraphTest.GasDetectorReaderService.IGasDetectorReaderWcfService {
        
        private BeginOperationDelegate onBeginGetLastMeasurementDelegate;
        
        private EndOperationDelegate onEndGetLastMeasurementDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastMeasurementCompletedDelegate;
        
        public GasDetectorReaderWcfServiceClient() {
        }
        
        public GasDetectorReaderWcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GasDetectorReaderWcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GasDetectorReaderWcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GasDetectorReaderWcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetLastMeasurementCompletedEventArgs> GetLastMeasurementCompleted;
        
        public ZGroup.MonitoringSuite.BDO.Common.Measurement GetLastMeasurement(long gasdetectorId) {
            return base.Channel.GetLastMeasurement(gasdetectorId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLastMeasurement(long gasdetectorId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastMeasurement(gasdetectorId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ZGroup.MonitoringSuite.BDO.Common.Measurement EndGetLastMeasurement(System.IAsyncResult result) {
            return base.Channel.EndGetLastMeasurement(result);
        }
        
        private System.IAsyncResult OnBeginGetLastMeasurement(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long gasdetectorId = ((long)(inValues[0]));
            return this.BeginGetLastMeasurement(gasdetectorId, callback, asyncState);
        }
        
        private object[] OnEndGetLastMeasurement(System.IAsyncResult result) {
            ZGroup.MonitoringSuite.BDO.Common.Measurement retVal = this.EndGetLastMeasurement(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastMeasurementCompleted(object state) {
            if ((this.GetLastMeasurementCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastMeasurementCompleted(this, new GetLastMeasurementCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastMeasurementAsync(long gasdetectorId) {
            this.GetLastMeasurementAsync(gasdetectorId, null);
        }
        
        public void GetLastMeasurementAsync(long gasdetectorId, object userState) {
            if ((this.onBeginGetLastMeasurementDelegate == null)) {
                this.onBeginGetLastMeasurementDelegate = new BeginOperationDelegate(this.OnBeginGetLastMeasurement);
            }
            if ((this.onEndGetLastMeasurementDelegate == null)) {
                this.onEndGetLastMeasurementDelegate = new EndOperationDelegate(this.OnEndGetLastMeasurement);
            }
            if ((this.onGetLastMeasurementCompletedDelegate == null)) {
                this.onGetLastMeasurementCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastMeasurementCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastMeasurementDelegate, new object[] {
                        gasdetectorId}, this.onEndGetLastMeasurementDelegate, this.onGetLastMeasurementCompletedDelegate, userState);
        }
    }
}
